#!/bin/sh
# movie2gif
# Convert video file into GIF or get info about the file.

movie2gif() {
  _init

  OPTIND=

  while getopts "nv" OPTION
  do
    case "$OPTION" in
      n) DRYRUN=1 ;;
      v) VERBOSE=1 ;;
    esac
  done

  shift `expr $OPTIND - 1`

  [ $# -lt 1 ] && "${SCRIPT_NAME}_help" && return $ERR_ARG

  ACTION="$1"
  shift

  _is_verbose && _echo "Verbose mode on."

  case "$ACTION" in
    clone|help) "${SCRIPT_NAME}_$ACTION" "$@" ;;

    convert|edit|file|path)
      "${SCRIPT_NAME}_run_clone" $ACTION "$@"
      "${SCRIPT_NAME}_$ACTION" "$@"
      ;;

    usage) "$SCRIPT_NAME" help "$@" ;;
    *) "${SCRIPT_NAME}_invalid" && return $ERR_ARG ;;
  esac
}

movie2gif_clone() {
  OUTPUT_DIR="$1"
  shift

  [ -z "$OUTPUT_DIR" ] && OUTPUT_DIR="$PWD"

  [ "$SCRIPT_DIR" == "$OUTPUT_DIR" ] && return

  if _file_absent "$OUTPUT_DIR/$SCRIPT_NAME"
  then
    _echo "$SCRIPT_DIR/$SCRIPT_NAME => $OUTPUT_DIR/$SCRIPT_NAME"
    cp "$SCRIPT_DIR/$SCRIPT_NAME" "$OUTPUT_DIR/$SCRIPT_NAME"
  fi
}

movie2gif_convert() {
  OPTIND=

  while getopts "a:c:d:f:h:m:o:p:r:s:w:" OPTION
  do
    case "$OPTION" in
      a) scale="$OPTARG" ;;
      c) colors="$OPTARG" ;;
      d) duration="$OPTARG" ;;
      f) filters="$OPTARG" ;;
      h) height="$OPTARG" ;;
      m) more="$OPTARG" ;;
      o) crop="$OPTARG" ;;
      p) palette="$OPTARG" ;;
      r) fps="$OPTARG" ;;
      s) start="$OPTARG" ;;
      w) width="$OPTARG" ;;
    esac
  done

  shift `expr $OPTIND - 1`

  [ -z "$colors" ] && colors=32
  [ -z "$fps" ] && fps=10
  [ -z "$height" ] && height=-1
  [ -z "$width" ] && width=720

  args=
  preargs=

  if _is_verbose
  then
    _add_prearg '-loglevel info'
  else
    _add_prearg '-hide_banner'
    _add_prearg '-nostats'
    _add_prearg '-loglevel fatal'
  fi

  if [ -z "$filters" ]
  then
    filters=

    [ -n "$crop" ] && _add_filter "crop=$crop"
    [ -n "$scale" ] && _add_filter "setpts=$scale*PTS"

    _add_filter "fps=$fps,scale=$width:$height:flags=lanczos"

    [ -n "$more" ] && _add_filter "$more"
  fi

  [ -n "$start" ] && _add_prearg "-ss $start"
  [ -n "$duration" ] && _add_prearg "-t $duration"

  [ $# -lt 1 ] && _error "Must set input filename." && return $ERR_ARG

  input="$1"
  shift

  output="$1"
  shift

  args="$args $@"
  
  medial="$input"

  if [ -z "$palette" ]
  then
    template="` mktemp "$medial-palette-$colors.XXXXXX" `"
    rm "$template"
    palette="` mktemp "$template.png" `"
    tmppalette=1
  else
    tmppalette=0
  fi

  [ -z "$output" ] && output="` echo "$input" | sed 's/\.[^\.]*$//g' `.gif"

  if _file_absent "$input"
  then
    _error "File not found: $input"
    return $ERR_FILE
  fi

  _echo "$input => $output"
  "${SCRIPT_NAME}_file" "$input"

  if _is_verbose
  then
    _echo "ffmpeg filters: $filters"
    _echo "ffmpeg preargs: $preargs"
    _echo "ffmpeg args: $args"
  fi

  _convert

  "${SCRIPT_NAME}_file" "$output"

  [ $tmppalette -eq 1 ] && rm "$palette"
}

movie2gif_edit() {
  "$EDITOR" "$SCRIPT_DIR/$SCRIPT_NAME"
}

movie2gif_file() {
  OPTIND=

  while getopts "s" OPTION
  do
    case "$OPTION" in
      s) format='%f %W %H %b' ;;
    esac
  done

  shift `expr $OPTIND - 1`

  [ -z "$format" ] && format='%f: %Wx%Hpx (%b)'

  [ $# -lt 1 ] && _error "Must set input filename." && return $ERR_ARG

  format="$format\n"
  input="$1"
  shift

  if _file_absent "$input"
  then
    _error "File not found: $input"
    return $ERR_FILE
  fi

  identify -format "$format" "$input"[0] 2>/dev/null

  result=$?

  if [ $result -gt 0 ]
  then
    _error "Not an image or not a format ImageMagick can recognise."
  fi

  return $?
}

movie2gif_help() {
  action="$ACTION"
  subject="$1"
  shift

  [ -z "$action" ] && action=help
  [ -z "$subject" ] && subject=all

  case "$subject" in
    all|convert|file) "${SCRIPT_NAME}_${action}_${subject}" "$@" ;;

    *)
      _error "No help about $subject."
      _error

      "${SCRIPT_NAME}_${action}_all" "$@"
      return $ERR_ARG ;;
  esac
}

movie2gif_help_all() {
  echo "Usage: $SCRIPT_NAME [options] clone|convert|edit|file|help|path"
  echo
  echo "Convert video file into GIF or get info about the file."
  echo
  echo "clone     Clone script to current or specified directory."
  echo "convert   Convert movie file into animated GIF file."
  echo "edit      Edit script with \$EDITOR ($EDITOR)."
  echo "file      Show info about image or movie file."
  echo "help      Show this help screen."
  echo "path      Get path of script file being run."
  echo
  echo "-n        Dry run."
  echo "-v        Verbose output."
  echo
}

movie2gif_help_convert() {
  echo "Usage: $SCRIPT_NAME convert [options] input [output]"
  echo
  echo "Convert movie file into animated GIF file."
  echo
  echo "input     Input movie file. Required."
  echo "output    Output GIF file. Optional."
  echo "          Defaults to movie file name with .gif extension."
  echo
  echo "All options below are optional:"
  echo
  echo "-a        Time scale. Less than 1 to speed up, more to slow down. (Default: 1)"
  echo "-c        Number of colours in palette. (Default: 32)"
  echo "-d        Duration in seconds. (Default: all)"
  echo "-f        Override all filters with specified ffmpeg filters."
  echo "-h        Image height of output. (Default: -1, keeping ratio with width)"
  echo "-m        Append specified ffmpeg filters."
  echo "-o        Crop image (out_w:out_h:x:y). (Default: no crop)"
  echo "-r        Number of frames per second (FPS). (Default: 10)"
  echo "-s        Start time in seconds. (Default: 0)"
  echo "-w        Image width of output. (Default: 720)"
  echo
}

movie2gif_help_file() {
  echo "Usage: $SCRIPT_NAME file [options] input"
  echo
  echo "Show info about image or movie file."
  echo
  echo "input     Input image or movie file. Required."
  echo
  echo "All options below are optional:"
  echo
  echo "-s        Space-separated format: \"filename width height filesize\""
  echo
}

movie2gif_invalid() {
  _error "Invalid action: $ACTION"
  _error

  "$SCRIPT_NAME" help
  return 1
}

movie2gif_path() {
  _echo "$SCRIPT_DIR/$SCRIPT_NAME"
}

movie2gif_run_clone() {
  [ "$SCRIPT_DIR" == "$PWD" ] && return
  
  if [ -f "$PWD/$SCRIPT_NAME" ]
  then
    "$PWD/$SCRIPT_NAME" "$@"
    exit $?
  fi
}

_add_prearg() {
  [ -n "$preargs" ] && preargs="$preargs "
  preargs="${preargs}$@"
}

_add_arg() {
  [ -n "$args" ] && args="$args "
  args="${args}$@"
}

_add_filter() {
  [ -n "$filters" ] && filters="$filters,"
  filters="${filters}$@"
}

_check_palette() {
  _file_exists "$palette" && return

  _error "Palette file not found: $palette"
  return $ERR_FILE
}

_convert() {
  # http://blog.pkh.me/p/21-high-quality-gif-with-ffmpeg.html

  if [ $tmppalette -eq 1 ] || ! _file_exists "$palette"
  then
    _run "ffmpeg $preargs -i \"$input\" -vf \"$filters,palettegen\"" \
      "-y $args \"$palette\""
  fi

  _check_palette || return $?

  _run "mogrify +dither -colors $colors \"$palette\""

  _run "ffmpeg $preargs -i \"$medial\" -i \"$palette\"" \
    "-lavfi \"$filters [x]; [x][1:v] paletteuse\" -y $args \"$output\""

  image_optim="` which image_optim 2>/dev/null `"
  [ -n "$image_optim" ] && $image_optim "$output" 2>&1 1>/dev/null
}

_echo() {
  echo "$@"
}

_error() {
  _echo "$@" >&2
}

_file_absent() {
  _is_dryrun && return 1
  [ ! -f "$1" ]
}

_file_exists() {
  _is_dryrun && return
  [ -f "$1" ]
}

_init() {
  SCRIPT_NAME="` basename $0 `"
  SCRIPT_DIR="` dirname $0 `"
  DRYRUN=0
  VERBOSE=0

  ERR_ARG=1
  ERR_FILE=2
}

_is_dryrun() {
  [ $DRYRUN -gt 0 ]
}

_is_verbose() {
  [ $VERBOSE -gt 0 ]
}

_run() {
  _is_verbose && _echo "> $@"
  _is_dryrun && return
  eval $@
}

movie2gif "$@"
